package org.inframesh.workstage.toolset.ormapper.core;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;
import java.util.Map;

import org.eclipse.jface.preference.IPreferenceStore;
import org.inframesh.workstage.toolset.Activator;
import org.inframesh.workstage.toolset.core.database.DatabaseManager;
import org.inframesh.workstage.toolset.ormapper.core.model.BeanRule;
import org.inframesh.workstage.toolset.ormapper.core.model.MapSetting;
import org.inframesh.workstage.toolset.ormapper.core.model.PathSetting;
import org.inframesh.workstage.toolset.ui.preference.PreferenceConstants;


public class BeanGenerator {
	private PathSetting pathSetting;
	private BeanRule rule;
	private String[] tables;
	private Map settingMap;
	// private Map<String, MapSetting> map;
	

	/*-------------For Singleton-----------------------*/
	private static BeanGenerator beanGenerator;

	private BeanGenerator() {
	}

	public static BeanGenerator getInstance() {
		if (beanGenerator == null) {
			return new BeanGenerator();
		}

		return beanGenerator;
	}

	/*-------------------------------------------------*/
	public void setPathSetting(PathSetting pathSetting) {
		this.pathSetting = pathSetting;
	}

	public PathSetting getPathSetting() {
		return pathSetting;
	}

	public BeanRule getRule() {
		return rule;
	}

	public void setRule(BeanRule rule) {
		this.rule = rule;
	}

	public void setTables(String[] tables) {
		this.tables = tables;
	}

	public String[] getTables() {
		return tables;
	}
	
	public Map getSettingMap() {
		return settingMap;
	}

	public void setSettingMap(Map settingMap) {
		this.settingMap = settingMap;
	}


	public void generate() throws IOException {
		DatabaseManager databaseManager = Activator.getDefaultDatabaseManager();

		for (int i = 0; i < tables.length; ++i) {
			String tableName = tables[i];
			List list;// List<MapSetting>
			
			//���MAP���о�ֱ��ʹ�ã�û�оʹ���ݿ��ѯʹ��Ĭ��ӳ��
			if(settingMap.containsKey(tableName)) {
				list = (List) settingMap.get(tableName);
			} else {
				list = databaseManager.getDefaultMapSetting(tableName);
			}
			generateJavaBean(tableName, list);
		}
	}

	private void generateJavaBean(String tableName, List list)
			throws IOException {
		
		IPreferenceStore pref = Activator.getDefault().getPreferenceStore();

		String beanName = PluginToolkit.convertName(tableName, "_", false);

		File file = new File(pathSetting.getPath() + "\\"
				+ rule.getBeanPrefix() + beanName + rule.getBeanSuffix()
				+ ".java");

		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file, false), "UTF-8"));
		
//		String meta = "/**\n * Table Name: " + tableName + "\n *\n * Generated by ormapper plug-in\n */\n\n";
//		bw.write(meta);
		
		String comments = pref.getString(PreferenceConstants.CODE_FILE_COMMENTS);

		bw.write(comments);


		// Package Name
		if(pathSetting.getPackageName() != null && !"".equals(pathSetting.getPackageName()))
			bw.write("package " + pathSetting.getPackageName() + ";\n\n");

		// @Table Annotation
		if(rule.isGenerateAnnotation()) {
			bw.write("@Table(name=\"" + tableName.toUpperCase() + "\")\n");
		}
		// Class beginning
		bw.write("public class " + beanName+ rule.getBeanSuffix() + "\n");
		bw.write("{\n");

		// Property
		for (MapSetting mapSetting : (List<MapSetting>) list) {
			
			if(mapSetting.isExcluded()) continue;
			
			String remarks = mapSetting.getRemarks();
			if(remarks != null && !"".equals(remarks)) {
				bw.write(repeat(" ", 4) + "/**\n");
				bw.write(repeat(" ", 4) + " * " + remarks + "\n");
				bw.write(repeat(" ", 4) + " */\n");
			}
			// @Column Annotation
			if(rule.isGenerateAnnotation()) {
				bw.write(repeat(" ", 4) + "@Column(");
						if(mapSetting.isPk())
							bw.write("pk=true, ");
				String jdbcType = mapSetting.getJdbcType().toUpperCase();
				if("CHARACTER".equals(jdbcType)) jdbcType = "CHAR";
				bw.write("name=\"" + mapSetting.getFieldName().toUpperCase() + "\", type=Types." 
						+ jdbcType);
				
				if(!mapSetting.isNullable()) {
					bw.write(", nullable=false");
				}
				bw.write(")\n");
			}
			
			bw.write(repeat(" ", 4) + "private " + mapSetting.getJavaType() + " " + mapSetting.getPropertyName() + ";");
//			bw.write(" // " + mapSetting.getFieldName() + "  " + mapSetting.getJdbcType());
			bw.write("\n\n");
		}

		bw.write("\n");

		// Getter & Setter
		for (MapSetting mapSetting : (List<MapSetting>) list) {
			
			if(mapSetting.isExcluded()) continue;
			
			String propertyName = mapSetting.getPropertyName();
			String temp = propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
			String getterName = "get" + temp;
			String setterName = "set" + temp;

			// setter
			bw.write(repeat(" ", 4) + "public void " + setterName + "("
					+ mapSetting.getJavaType() + " " + mapSetting.getPropertyName() + ") {\n");
			bw.write(repeat(" ", 8) + "this." + mapSetting.getPropertyName()
					+ " = " + mapSetting.getPropertyName() + ";\n");
			bw.write(repeat(" ", 4) + "}\n\n");

			// getter
			bw.write(repeat(" ", 4) + "public " + mapSetting.getJavaType()
					+ " " + getterName + "() {\n");
			bw.write(repeat(" ", 8) + "return this."
					+ mapSetting.getPropertyName() + ";\n");
			bw.write(repeat(" ", 4) + "}\n\n");
		}

		// -->class end
		bw.write("}\n");

		bw.close();
	}

	private static String repeat(String c, int count) {
		String temp = "";
		for (int i = 0; i < count; i++) {
			temp += c;
		}

		return temp;
	}

}
